//import Rest from 'grommet/utils/Rest';
import request from 'superagent-bluebird-promise';
import * as types from '../constants/ActionTypes';
import {HOST_NAME/*, getFormData*/} from '../util/Config';
import history from '../RouteHistory';

function requestViews() {
  return {
    type: types.REQUEST_VIEWS
  };
}

function receiveViewsSuccess(json) {
  return {
    type: types.RECEIVE_VIEWS_SUCCESS,
    views: json
  };
}

function receiveViewsFailure(err) {
  return {
    type: types.RECEIVE_VIEWS_FAILURE,
    err
  };
}

//function requestTemplateTable(selectedViewId) {
//  return {
//    type: types.REQUEST_TEMPLATE_TABLE,
//    selectedViewId: selectedViewId
//  };
//}
//
//function receiveTemplateTableSuccess(json) {
//  return {
//    type: types.RECEIVE_TEMPLATE_TABLE_SUCCESS,
//    views: json
//  };
//}
//
//function receiveTemplateTableFailure(err) {
//  return {
//    type: types.RECEIVE_TEMPLATE_TABLE_FAILURE,
//    err
//  };
//}

//function queryRootByTemplate(template, keyword) {
//
//  //console.log('template:');
//  //console.log(template);
//  var form = getFormData();
//  form["ref-link"] = "db/" + template.$.sqlname;
//
//  // clean param fields generated by amTree
//  form.param.fields = template.fields;
//  //for (var i in template.field) {
//  //    form.param.fields.push(template.field[i]["$"]["sqlname"]);
//  //}
//  if (keyword) {
//    var AQLs = [];
//    template.fields.forEach(function (obj) {
//      AQLs.push(obj + " like '%" + keyword + "%'");
//    });
//
//    form.param.filter = AQLs.join(" OR ");
//  }
//
//  if (template.AQL) {
//    if (form.param.filter != "")
//      form.param.filter = form.param.filter + " AND " + template.AQL;
//    else
//      form.param.filter = template.AQL;
//  }
//
//  console.log('form:');
//  console.log(form);
//  $scope.tempRecords = template;
//  $scope.tempRecords['timeStart1'] = Date.now();
//  $scope.tempRecords.loading1 = true;
//
//  $http.post('/am/rest', form).success(function (data) {
//    if (data instanceof Object) {
//      $scope.tempRecords.records = data.entities;
//      $scope.tempRecords.count = data.count;
//
//      $scope.tempRecords['timeEnd1'] = Date.now();
//      $scope.tempRecords.loading1 = false;
//
//      if (temp.$loki && !keyword) {
//        temp['last'] = {
//          time: Date.now(),
//          count: data.count
//        };
//        $http.post('/json/template', temp).success(function (data) {
//
//        });
//      }
//
//      if (data.entities[0])
//        $scope.getRecordByTemp(data.entities[0], template, true);
//
//    } else {
//
//      $scope.alerts.push({
//        type: 'warning',
//        msg: JSON.stringify(form)
//      });
//
//      $scope.alerts.push({
//        type: 'danger',
//        msg: data
//      });
//
//    }
//
//  }).error(function (data) {
//    $scope.alerts.push({
//      type: 'danger',
//      msg: data
//    });
//  });
//}

export function loadViews(selectedViewId) {
  return dispatch => {
    dispatch(requestViews());
    return request.get(HOST_NAME + '/json/template').then(function (res) {
      dispatch(receiveViewsSuccess(res.body));
      let views = res.body;
      //console.log("loadViews - views:");
      //console.log(views);
      if (views.length > 0) {
        //console.log("loadViews - selectedViewId: " + selectedViewId);
        let selectedView = selectedViewId ? views.filter(view => view.$loki == selectedViewId)[0] : views[0];
        //console.log("loadViews - selectedView: ");
        //console.log(selectedView);
        if (!selectedViewId) {
          dispatch({
            type: types.SET_SELECTED_VIEW,
            selectedViewId: selectedViewId,
            selectedView: selectedView
          });
          history.push("/views/" + selectedView.$loki); // display the first one as default
        }
      }
    }, function (error) {
      dispatch(receiveViewsFailure(error));
    });
  };
}

export function setSelectedView(selectedViewId, selectedView) {
  return dispatch => {
    console.log("setSelectedView: " + selectedViewId);
    dispatch({
      type: types.SET_SELECTED_VIEW,
      selectedViewId: selectedViewId,
      selectedView: selectedView
    });
  };

}
export function loadTemplateTable(selectedViewId, selectedView) {
  return dispatch => {
    console.log("action - loadTemplateTable - selectedViewId: " + selectedViewId);
    console.log("action - loadTemplateTable - selectedView: ");
    console.log(selectedView);
    //queryRootByTemplate(selectedView);
    //return request.get(HOST_NAME + '/json/template').then(function (res) {
    //  dispatch(receiveTemplateTableSuccess(res.body));
    //}, function (error) {
    //  dispatch(receiveTemplateTableFailure(error));
    //});
  };
}

